name: Release

on:
  workflow_run:
    workflows: ["CI"]
    types: [completed]
    branches: [main]

permissions:
  contents: write
  id-token: write # Required for cosign keyless signing

env:
  CARGO_TERM_COLOR: always

jobs:
  # Check if version actually changed and prerequisites passed
  check-version:
    runs-on: ubuntu-latest
    # Only run if the prerequisite workflow succeeded
    if: github.event.workflow_run.conclusion == 'success'
    outputs:
      version-changed: ${{ steps.version-check.outputs.VERSION_CHANGED }}
      new-version: ${{ steps.version-check.outputs.NEW_VERSION }}
      tag-name: ${{ steps.version-check.outputs.TAG_NAME }}
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.event.workflow_run.head_sha }}
          fetch-depth: 0 # Need full history to check tags

      - name: Show trigger information
        run: |
          echo "Triggered by workflow: ${{ github.event.workflow_run.name }}"
          echo "Commit SHA: ${{ github.event.workflow_run.head_sha }}"
          echo "Checking if version needs to be released..."

      - name: Fetch all tags
        run: git fetch --tags

      - name: Check version change
        id: version-check
        run: ./scripts/check-version-change.sh

  # Build binaries for multiple targets
  build:
    needs: check-version
    if: needs.check-version.outputs.version-changed == 'true'
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-24.04
            target: x86_64-unknown-linux-gnu
            build-type: normal
          - os: macos-latest
            target: universal-apple-darwin
            build-type: universal
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.event.workflow_run.head_sha }}

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - uses: Swatinem/rust-cache@v2
        with:
          key: ${{ matrix.target }}

      # Build using script
      - name: Build target
        shell: bash
        run: ./scripts/build-target.sh "${{ matrix.target }}" "${{ matrix.build-type }}"

      # Prepare binary using script
      - name: Prepare binary
        shell: bash
        run: ./scripts/prepare-binary.sh "${{ needs.check-version.outputs.new-version }}" "${{ matrix.target }}"

      # Upload binary as artifact
      - name: Upload binary
        uses: actions/upload-artifact@v4
        with:
          name: binary-${{ matrix.target }}
          path: dist/*
          retention-days: 1

  # Create GitHub release
  release:
    needs: [check-version, build]
    if: needs.check-version.outputs.version-changed == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.event.workflow_run.head_sha }}

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: dist
          merge-multiple: true

      - name: Display downloaded files
        run: ls -la dist/

      - name: Filter release files
        shell: bash
        run: ./scripts/filter-release-files.sh

      - name: Install cosign
        uses: sigstore/cosign-installer@v3

      - name: Sign release binaries
        shell: bash
        run: ./scripts/sign-release-binaries.sh

      - name: Validate signing completed
        shell: bash
        run: |
          echo "Checking that signing completed successfully..."
          cd release-files
          SIGNED_COUNT=0
          MISSING_SIGS=0

          for file in envsense-*; do
            if [[ "$file" != *.sha256 && "$file" != *.sig && "$file" != *.bundle ]]; then
              if [ -f "${file}.sig" ] && [ -f "${file}.bundle" ]; then
                echo "✅ $file: Both signature and bundle created"
                SIGNED_COUNT=$((SIGNED_COUNT + 1))
              else
                echo "❌ $file: Missing signature files"
                MISSING_SIGS=$((MISSING_SIGS + 1))
              fi
            fi
          done

          echo "Summary: $SIGNED_COUNT files signed, $MISSING_SIGS missing signatures"

          if [ $MISSING_SIGS -gt 0 ]; then
            echo "❌ Some files are missing signatures!"
            exit 1
          else
            echo "✅ All files have been signed successfully"
          fi

      - name: Extract changelog
        shell: bash
        run: ./scripts/create-release.sh "${{ needs.check-version.outputs.new-version }}"

      - name: Create release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ needs.check-version.outputs.tag-name }}
          name: ${{ needs.check-version.outputs.tag-name }}
          body_path: changelog_excerpt.md
          files: release-files/*
          draft: false
          prerelease: false
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create git tag
        shell: bash
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git tag ${{ needs.check-version.outputs.tag-name }}
          git push origin ${{ needs.check-version.outputs.tag-name }}
